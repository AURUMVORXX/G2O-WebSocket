name: "Module CI/CD"

on: workflow_dispatch

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PROJECT_NAME: G2OWS

jobs:
  create-new-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      assets_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release Title
          body_path: CHANGELOG.md
          draft: true
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    needs: create-new-release
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          
      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        shell: cmd
        run: |
          cd vcpkg
          .\bootstrap-vcpkg.bat -disableMetrics

      - name: Set environment variables
        shell: bash
        run: |
          echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_PATH
          
      - name: Verify installation
        shell: cmd
        run: |
          vcpkg --version
          echo VCPKG_ROOT=%VCPKG_ROOT%

      - name: Configure
        run: cmake . --preset Windows-${{ matrix.arch }}-Release

      - name: Build
        run: cmake --build --preset Windows-${{ matrix.arch }}-Release

      - name: Copy module
        run: copy out\\build\\Windows-${{ matrix.arch }}-Release\\${{ env.PROJECT_NAME }}.${{ matrix.arch }}.dll .
      
      - name: Upload module
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-new-release.outputs.assets_url }}
          asset_path: ./${{ env.PROJECT_NAME }}.${{ matrix.arch }}.dll
          asset_name: ${{ env.PROJECT_NAME }}.${{ matrix.arch }}.dll
          asset_content_type: application/x-msdownload

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: create-new-release
    strategy:
      matrix:
        arch: [x64]
    container:
      image: registry.gitlab.com/gothicmultiplayerteam/buildimage:ubuntu-20.04-x64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg

      - name: Bootstrap vcpkg
        run: |
          cd vcpkg
          ./bootstrap-vcpkg.sh -disableMetrics

      - name: Set environment variables
        run: |
          echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_PATH

      - name: Verify installation
        run: |
          vcpkg --version
          echo "VCPKG_ROOT=$VCPKG_ROOT"

      - name: Configure
        run: cmake . --preset Linux-${{ matrix.arch }}-Release

      - name: Build
        run: cmake --build --preset Linux-${{ matrix.arch }}-Release

      - name: Copy module
        run: cp out/build/Linux-${{ matrix.arch }}-Release/${{ env.PROJECT_NAME }}.${{ matrix.arch }}.so ./
      
      - name: Upload module
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-new-release.outputs.assets_url }}
          asset_path: ./${{ env.PROJECT_NAME }}.${{ matrix.arch }}.so
          asset_name: ${{ env.PROJECT_NAME }}.${{ matrix.arch }}.so
          asset_content_type: application/x-sharedlib